use Z_UNIVER;
--Задание 1, перечень кодов аудиаторий и соответствующих типов
SELECT AUDITORIUM.AUDITORIUM Аудитория, AUDITORIUM_TYPE.AUDITORIUM_TYPE Тип
	FROM AUDITORIUM INNER JOIN AUDITORIUM_TYPE
	ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE;

--Задание 2, перечень кодов аудиторий и соответствующих типов
SELECT AUDITORIUM.AUDITORIUM Аудитория, AUDITORIUM_TYPE.AUDITORIUM_TYPENAME Тип
	FROM AUDITORIUM INNER JOIN AUDITORIUM_TYPE
	ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE	AND AUDITORIUM_TYPE.AUDITORIUM_TYPENAME LIKE '%компьютер%';

--Задание 3
SELECT T1.AUDITORIUM, T2.AUDITORIUM_TYPENAME
	FROM AUDITORIUM AS T1, AUDITORIUM_TYPE AS T2
	WHERE T1.AUDITORIUM_TYPE = T2.AUDITORIUM_TYPE;

SELECT T1.AUDITORIUM, T2.AUDITORIUM_TYPENAME
	FROM AUDITORIUM AS T1, AUDITORIUM_TYPE AS T2
	WHERE T1.AUDITORIUM_TYPE = T2.AUDITORIUM_TYPE AND T2.AUDITORIUM_TYPENAME LIKE '%компьютер%';

--Задание 4
SELECT FACULTY.FACULTY Факультет, PULPIT.PULPIT Кафедра, PROFESSION.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, STUDENT.NAME [Имя студента], 
    CASE
		WHEN PROGRESS.NOTE = 6 THEN 'шесть'
		WHEN PROGRESS.NOTE = 7 THEN 'семь'
		WHEN PROGRESS.NOTE = 8 THEN 'восемь'
    END Оценка
FROM STUDENT 
INNER JOIN PROGRESS ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT AND PROGRESS.NOTE BETWEEN 6 AND 8
INNER JOIN GROUPS ON STUDENT.IDGROUP = GROUPS.IDGROUP
INNER JOIN PROFESSION ON GROUPS.PROFESSION = PROFESSION.PROFESSION
INNER JOIN FACULTY ON PROFESSION.FACULTY = FACULTY.FACULTY
INNER JOIN PULPIT ON PULPIT.FACULTY = FACULTY.FACULTY
ORDER BY FACULTY.FACULTY ASC, PULPIT.PULPIT ASC, PROFESSION.PROFESSION ASC, STUDENT.NAME ASC, PROGRESS.NOTE DESC

--Задание 5
SELECT FACULTY.FACULTY Факультет, PULPIT.PULPIT Кафедра, PROFESSION.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, STUDENT.NAME [Имя студента], 
    CASE
		WHEN PROGRESS.NOTE = 6 THEN 'шесть'
		WHEN PROGRESS.NOTE = 7 THEN 'семь'
		WHEN PROGRESS.NOTE = 8 THEN 'восемь'
    END Оценка
FROM STUDENT 
INNER JOIN PROGRESS ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT AND PROGRESS.NOTE BETWEEN 6 AND 8
INNER JOIN GROUPS ON STUDENT.IDGROUP = GROUPS.IDGROUP
INNER JOIN PROFESSION ON GROUPS.PROFESSION = PROFESSION.PROFESSION
INNER JOIN FACULTY ON PROFESSION.FACULTY = FACULTY.FACULTY
INNER JOIN PULPIT ON PULPIT.FACULTY = FACULTY.FACULTY
ORDER BY (CASE 
			WHEN PROGRESS.NOTE = 7 THEN 1
			WHEN PROGRESS.NOTE = 8 THEN 2
			WHEN PROGRESS.NOTE = 6 THEN 3		
			END
		 )
	
--Задание 6, полный перечень кафедр и преподавателей (если нет преподавателей - ***)
SELECT PULPIT.PULPIT_NAME Кафедра, ISNULL(TEACHER.TEACHER_NAME, '***') Преподаватель
FROM PULPIT LEFT OUTER JOIN TEACHER ON PULPIT.PULPIT = TEACHER.PULPIT

--Задание 7
SELECT PULPIT.PULPIT_NAME Кафедра, ISNULL(TEACHER.TEACHER_NAME, '***') Преподаватель --пропадают пустые кафедры, так как смотрим по преподавателям
FROM TEACHER  LEFT OUTER JOIN PULPIT ON PULPIT.PULPIT = TEACHER.PULPIT

SELECT PULPIT.PULPIT_NAME Кафедра, ISNULL(TEACHER.TEACHER_NAME, '***') Преподаватель
FROM PULPIT RIGHT OUTER JOIN TEACHER ON PULPIT.PULPIT = TEACHER.PULPIT

--Задание 8
CREATE TABLE STUDENT_NEW (
	STUDENT_NUMBER integer NOT NULL PRIMARY KEY,
	SURNAME nvarchar(15),
	GROUPNUMBER tinyint NOT NULL CHECK (GroupNumber >=1 AND GroupNumber <=5)
	);
INSERT INTO STUDENT_NEW (STUDENT_NUMBER, SURNAME, GROUPNUMBER)
			   VALUES(193293, 'Зинович', 4),
					 (193294, 'Перкаль', 4),
					 (193266, 'Сычёв', 4);
CREATE TABLE RESULTS_NEW(
	ID int IDENTITY(1,1) PRIMARY KEY,
	STUDENT_NUMBER integer REFERENCES STUDENT_NEW(STUDENT_NUMBER),
	AVERAGE_MARK integer
)
INSERT INTO RESULTS_NEW(STUDENT_NUMBER, AVERAGE_MARK)
					VALUES(193293, 8),
						  (193294, 9)
SELECT * FROM STUDENT_NEW;
SELECT * FROM RESULTS_NEW;

--коммутативность, своя таблица
SELECT STUDENT_NEW.STUDENT_NUMBER, ISNULL(RESULTS_NEW.AVERAGE_MARK, 0)
FROM RESULTS_NEW FULL OUTER JOIN STUDENT_NEW ON STUDENT_NEW.STUDENT_NUMBER = RESULTS_NEW.STUDENT_NUMBER
SELECT STUDENT_NEW.STUDENT_NUMBER, ISNULL(RESULTS_NEW.AVERAGE_MARK, 0)
FROM STUDENT_NEW FULL OUTER JOIN RESULTS_NEW ON STUDENT_NEW.STUDENT_NUMBER = RESULTS_NEW.STUDENT_NUMBER

--коммутативность
SELECT PULPIT.PULPIT_NAME Кафедра, ISNULL(TEACHER.TEACHER_NAME, '***') Преподаватель
FROM TEACHER FULL OUTER JOIN PULPIT ON PULPIT.PULPIT = TEACHER.PULPIT
SELECT PULPIT.PULPIT_NAME Кафедра, ISNULL(TEACHER.TEACHER_NAME, '***') Преподаватель
FROM PULPIT FULL OUTER JOIN TEACHER ON PULPIT.PULPIT = TEACHER.PULPIT

--объединение LEFT OUTER JOIN и RIGHT OUTER JOIN соединений, своя таблица
SELECT STUDENT_NEW.STUDENT_NUMBER, ISNULL(RESULTS_NEW.AVERAGE_MARK, 0)
FROM STUDENT_NEW FULL OUTER JOIN RESULTS_NEW ON STUDENT_NEW.STUDENT_NUMBER = RESULTS_NEW.STUDENT_NUMBER

SELECT STUDENT_NEW.STUDENT_NUMBER, ISNULL(RESULTS_NEW.AVERAGE_MARK, 0)
FROM (STUDENT_NEW LEFT OUTER JOIN RESULTS_NEW ON STUDENT_NEW.STUDENT_NUMBER = RESULTS_NEW.STUDENT_NUMBER) 
UNION
SELECT STUDENT_NEW.STUDENT_NUMBER, ISNULL(RESULTS_NEW.AVERAGE_MARK, 0)
FROM (STUDENT_NEW RIGHT OUTER JOIN RESULTS_NEW ON STUDENT_NEW.STUDENT_NUMBER = RESULTS_NEW.STUDENT_NUMBER);

--объединение LEFT OUTER JOIN и RIGHT OUTER JOIN соединений
SELECT PULPIT.PULPIT_NAME Кафедра, ISNULL(TEACHER.TEACHER_NAME, '***') Преподаватель
FROM PULPIT FULL OUTER JOIN TEACHER ON PULPIT.PULPIT = TEACHER.PULPIT

SELECT PULPIT.PULPIT_NAME Кафедра, ISNULL(TEACHER.TEACHER_NAME, '***') Преподаватель
FROM (PULPIT LEFT OUTER JOIN TEACHER ON PULPIT.PULPIT = TEACHER.PULPIT) 
UNION
SELECT PULPIT.PULPIT_NAME Кафедра, ISNULL(TEACHER.TEACHER_NAME, '***') Преподаватель
FROM (PULPIT RIGHT OUTER JOIN TEACHER ON PULPIT.PULPIT = TEACHER.PULPIT);

--включает соединение INNER JOIN этих таблиц, своя таблица
SELECT STUDENT_NEW.STUDENT_NUMBER, ISNULL(RESULTS_NEW.AVERAGE_MARK, 0)
FROM STUDENT_NEW FULL OUTER JOIN RESULTS_NEW ON STUDENT_NEW.STUDENT_NUMBER = RESULTS_NEW.STUDENT_NUMBER
INTERSECT
SELECT STUDENT_NEW.STUDENT_NUMBER, ISNULL(RESULTS_NEW.AVERAGE_MARK, 0)
FROM STUDENT_NEW INNER JOIN RESULTS_NEW ON STUDENT_NEW.STUDENT_NUMBER = RESULTS_NEW.STUDENT_NUMBER

--включает соединение INNER JOIN этих таблиц
SELECT PULPIT.PULPIT_NAME Кафедра, ISNULL(TEACHER.TEACHER_NAME, '***') Преподаватель
FROM (PULPIT FULL OUTER JOIN TEACHER ON PULPIT.PULPIT = TEACHER.PULPIT) 
INTERSECT
SELECT PULPIT.PULPIT_NAME Кафедра, ISNULL(TEACHER.TEACHER_NAME, '***') Преподаватель
FROM (PULPIT INNER JOIN TEACHER ON PULPIT.PULPIT = TEACHER.PULPIT);


SELECT * FROM STUDENT_NEW;
SELECT * FROM RESULTS_NEW;
--запрос, результат которого содержит данные левой (в операции FULL OUTER JOIN) таблицы и не содержит данные правой
SELECT STUDENT_NEW.STUDENT_NUMBER, ISNULL(RESULTS_NEW.AVERAGE_MARK, 0)
FROM STUDENT_NEW FULL OUTER JOIN RESULTS_NEW ON STUDENT_NEW.STUDENT_NUMBER = RESULTS_NEW.STUDENT_NUMBER
WHERE RESULTS_NEW.STUDENT_NUMBER is NULL

--запрос, результат которого содержит данные правой таблицы и не содержащие данные левой
SELECT STUDENT_NEW.STUDENT_NUMBER, ISNULL(RESULTS_NEW.AVERAGE_MARK, 0)
FROM STUDENT_NEW FULL OUTER JOIN RESULTS_NEW ON STUDENT_NEW.STUDENT_NUMBER = RESULTS_NEW.STUDENT_NUMBER
WHERE STUDENT_NEW.STUDENT_NUMBER is NULL

--запрос, результат которого содержит данные правой таблицы и левой таблиц
SELECT STUDENT_NEW.STUDENT_NUMBER, ISNULL(RESULTS_NEW.AVERAGE_MARK, 0)
FROM STUDENT_NEW FULL OUTER JOIN RESULTS_NEW ON STUDENT_NEW.STUDENT_NUMBER = RESULTS_NEW.STUDENT_NUMBER
WHERE RESULTS_NEW.STUDENT_NUMBER is NOT NULL AND STUDENT_NEW.STUDENT_NUMBER is NOT NULL

--Задание 9
SELECT AUDITORIUM.AUDITORIUM Аудитория, AUDITORIUM_TYPE.AUDITORIUM_TYPENAME Тип
FROM AUDITORIUM CROSS JOIN AUDITORIUM_TYPE WHERE AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE


--Задание 10 для Z_MyBase
USE Z_MyBase;
SELECT СТУДЕНТЫ.Номер_студента, ОЦЕНКИ.Экзаменационный_предмет, ОЦЕНКИ.Оценка
FROM СТУДЕНТЫ INNER JOIN ОЦЕНКИ ON СТУДЕНТЫ.Номер_студента = ОЦЕНКИ.Студент_номер
ORDER BY  ОЦЕНКИ.Экзаменационный_предмет ASC

SELECT СТУДЕНТЫ.Номер_студента, ОЦЕНКИ.Экзаменационный_предмет, ОЦЕНКИ.Оценка
FROM СТУДЕНТЫ FULL OUTER JOIN ОЦЕНКИ ON СТУДЕНТЫ.Номер_студента = ОЦЕНКИ.Студент_номер
ORDER BY (CASE 
			WHEN ОЦЕНКИ.Оценка = 10 THEN 1
			WHEN ОЦЕНКИ.Оценка = 9 THEN 2
			WHEN ОЦЕНКИ.Оценка = 8 THEN 3
			WHEN ОЦЕНКИ.Оценка = 7 THEN 4
			WHEN ОЦЕНКИ.Оценка = 4 THEN 5	
			WHEN ОЦЕНКИ.Оценка = 5 THEN 6		
			WHEN ОЦЕНКИ.Оценка = 6 THEN 7			
			END
		 )

SELECT СТУДЕНТЫ.Номер_студента, ОЦЕНКИ.Экзаменационный_предмет, ОЦЕНКИ.Оценка
FROM СТУДЕНТЫ INNER JOIN ОЦЕНКИ ON СТУДЕНТЫ.Номер_студента = ОЦЕНКИ.Студент_номер
INTERSECT
SELECT СТУДЕНТЫ.Номер_студента, ОЦЕНКИ.Экзаменационный_предмет, ОЦЕНКИ.Оценка
FROM СТУДЕНТЫ LEFT OUTER JOIN ОЦЕНКИ ON СТУДЕНТЫ.Номер_студента = ОЦЕНКИ.Студент_номер
INTERSECT
SELECT СТУДЕНТЫ.Номер_студента, ОЦЕНКИ.Экзаменационный_предмет, ОЦЕНКИ.Оценка
FROM СТУДЕНТЫ RIGHT OUTER JOIN ОЦЕНКИ ON СТУДЕНТЫ.Номер_студента = ОЦЕНКИ.Студент_номер
INTERSECT
SELECT СТУДЕНТЫ.Номер_студента, ОЦЕНКИ.Экзаменационный_предмет, ОЦЕНКИ.Оценка
FROM СТУДЕНТЫ FULL OUTER JOIN ОЦЕНКИ ON СТУДЕНТЫ.Номер_студента = ОЦЕНКИ.Студент_номер

SELECT ПРЕДМЕТЫ.Предмет, ОЦЕНКИ.Студент_номер, ОЦЕНКИ.Оценка
FROM ПРЕДМЕТЫ RIGHT JOIN ОЦЕНКИ ON ПРЕДМЕТЫ.Предмет = ОЦЕНКИ.Экзаменационный_предмет
WHERE  ОЦЕНКИ.Оценка is NULL

--Задание 11, создать TIMETABLE
USE Z_UNIVER;
CREATE TABLE TIMETABLE (
   IDGROUP integer CONSTRAINT TIMETABLE_GROUP_FK FOREIGN KEY REFERENCES GROUPS (IDGROUP),
   AUDITORIUM char(20) CONSTRAINT TIMETABLE_AUDITORIUM_FK FOREIGN KEY REFERENCES AUDITORIUM(AUDITORIUM),
   SUBJECT char(10) CONSTRAINT TIMETABLE_SUBJECT_FK FOREIGN KEY REFERENCES SUBJECT(SUBJECT), 
   TEACHER char(10) CONSTRAINT TIMETABLE_TEACHER_FK FOREIGN KEY REFERENCES TEACHER(TEACHER),
   WEEKSDAY char(2)  CHECK (WEEKSDAY IN ('пн', 'вт', 'ср', 'чт', 'пт', 'сб')),
   LESSON integer CHECK (LESSON in (1, 2, 3, 4)),
   IDTIMETABLE integer identity(1, 1) CONSTRAINT TIMETABLE_PK PRIMARY KEY,
);

SELECT * FROM TIMETABLE

INSERT INTO TIMETABLE(IDGROUP, AUDITORIUM, SUBJECT, TEACHER, WEEKSDAY, LESSON) 
		VALUES   (4, '413-1', 'ЭТ', 'БРКВЧ', 'пн', 1),
				 (4, '413-1', 'ДМ', 'ЖЛК', 'пн', 2),
				 --3
				 (4, '301-1', 'ООП', 'БРКВЧ', 'пн', 4),

				 (6, '206-1', 'ДМ', 'ЖЛК', 'ср', 1),
				 (6, '301-1', 'ООП', 'БРКВЧ', 'ср', 2),
				 (6, '413-1', 'ИГ', 'ЖЛК', 'ср', 3),
				 (6, '206-1', 'ИГ', 'ЖЛК', 'ср', 4)	
				 
--наличие свободных аудиторий на определенную пару, день недели
SELECT AUDITORIUM.AUDITORIUM [Свободные аудитории]
FROM AUDITORIUM FULL OUTER JOIN (SELECT * FROM TIMETABLE WHERE(TIMETABLE.LESSON = 1) AND (TIMETABLE.WEEKSDAY ='ср') ) AS NOTEMPTY
ON AUDITORIUM.AUDITORIUM = NOTEMPTY.AUDITORIUM
WHERE NOTEMPTY.AUDITORIUM is NULL

--преподаватели
--занятые преподаватели на эту пару
SELECT TIMETABLE.TEACHER [Не свободный преподаватель], TIMETABLE.LESSON Пара  
FROM TIMETABLE INNER JOIN TEACHER ON TIMETABLE.TEACHER = teacher.TEACHER 
WHERE(TIMETABLE.WEEKSDAY = 'пн') AND (TIMETABLE.LESSON = 4)

--свободные преподы на эту пару
SELECT TEACHER.TEACHER [Свободный преподаватель], LESSON Пара
FROM TEACHER FULL OUTER JOIN (SELECT TIMETABLE.TEACHER, TIMETABLE.LESSON FROM TIMETABLE INNER JOIN TEACHER on TIMETABLE.TEACHER = teacher.TEACHER 
		WHERE(TIMETABLE.WEEKSDAY = 'пн') AND (TIMETABLE.LESSON = 4) ) AS BUSYTEACHERS
ON TEACHER.TEACHER = BUSYTEACHERS.TEACHER
WHERE BUSYTEACHERS.TEACHER is NULL

--группы
--в каких группах есть пара
SELECT TIMETABLE.IDGROUP [Группа], TIMETABLE.LESSON Пара, TIMETABLE.WEEKSDAY
FROM TIMETABLE INNER JOIN GROUPS on TIMETABLE.IDGROUP = GROUPS.IDGROUP 
WHERE (TIMETABLE.WEEKSDAY = 'пн') AND (TIMETABLE.LESSON = 4)

--в каких группах нет пары в это время
SELECT GROUPS.IDGROUP [Свободная группа]
FROM GROUPS FULL OUTER JOIN (SELECT TIMETABLE.IDGROUP, TIMETABLE.LESSON, TIMETABLE.WEEKSDAY FROM TIMETABLE INNER JOIN GROUPS on TIMETABLE.IDGROUP = GROUPS.IDGROUP 
		WHERE (TIMETABLE.WEEKSDAY = 'пн') AND (TIMETABLE.LESSON = 4)) AS BUSYGROUPS
ON GROUPS.IDGROUP = BUSYGROUPS.IDGROUP
WHERE  BUSYGROUPS.IDGROUP is NULL


--SELECT *
--FROM TIMETABLE cur LEFT JOIN TIMETABLE prev 
--ON cur.LESSON = prev.LESSON + 1 AND cur.IDGROUP = prev.IDGROUP
--WHERE cur.LESSON <> 1 AND prev.LESSON is NULL