USE Z_UNIVER;

--Задание 1
-- На основе таблицы AUDITORIUM разработать SELECT-запрос, вычисляющий максимальную, минимальную и среднюю вместимость аудиторий, 
--суммарную вместимость всех аудиторий и общее количество аудиторий. 
SELECT 
	MAX(AUDITORIUM_CAPACITY) [Максимальная],
	MIN(AUDITORIUM_CAPACITY) [Минимальная],
	AVG(AUDITORIUM_CAPACITY) [Средняя],
	SUM(AUDITORIUM_CAPACITY) [Общая],
	COUNT(*) [Общее количество]
FROM AUDITORIUM

--Задание 2
--для каждого типа аудиторий максимальную, минимальную, среднюю вместимость аудиторий, суммарную вместимость всех аудиторий и общее количество аудиторий данного типа. 
SELECT AUDITORIUM_TYPE.AUDITORIUM_TYPENAME [Тип аудитории],
	MAX(AUDITORIUM_CAPACITY) [Максимальная],
	MIN(AUDITORIUM_CAPACITY) [Минимальная],
	AVG(AUDITORIUM_CAPACITY) [Средняя],
	SUM(AUDITORIUM_CAPACITY) [Общая],
	COUNT(*) [Общее количество]
FROM AUDITORIUM INNER JOIN AUDITORIUM_TYPE
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE
GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPENAME

--Задание 3
--количество экзаменационных оценок в заданном интервале
SELECT *
FROM (SELECT CASE 
			WHEN NOTE BETWEEN 4 AND 5 THEN '4-5'
			WHEN NOTE BETWEEN 6 AND 7 THEN '6-7'
			WHEN NOTE BETWEEN 8 AND 9 THEN '8-9'
			ELSE '10'
	 END [Оценки], COUNT (*) [Количество]
FROM PROGRESS  
GROUP BY CASE 
		WHEN NOTE BETWEEN 4 AND 5 THEN '4-5'
		WHEN NOTE BETWEEN 6 AND 7 THEN '6-7'
		WHEN NOTE BETWEEN 8 AND 9 THEN '8-9'
		ELSE '10'
	 END ) as T 
ORDER BY CASE [Оценки]
		WHEN '4-5' THEN 4
		WHEN '6-7' THEN 3
		WHEN '8-9' THEN 2
		ELSE 1
		END

--Задание 4
--содержит среднюю экзаменационную оценку для каждого курса каждой специальности. Строки отсортированы в порядке убывания средней оценки.
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, 
		CASE 
			WHEN GROUPS.YEAR_FIRST = 2010 THEN '4'
			WHEN GROUPS.YEAR_FIRST = 2011 THEN '3'
			WHEN GROUPS.YEAR_FIRST = 2012 THEN '2'
			WHEN GROUPS.YEAR_FIRST = 2013 THEN '1'
		END Курс,
		ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT)), 2) [Средняя оценка]
FROM STUDENT    INNER JOIN GROUPS ON STUDENT.IDGROUP = GROUPS.IDGROUP
				INNER JOIN FACULTY ON FACULTY.FACULTY = GROUPS.FACULTY
				INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION,  GROUPS.YEAR_FIRST
ORDER BY [Средняя оценка] DESC


--Переписать SELECT-запрос, чтобы в расчете среднего значения оценок использовались оценки только по дисциплинам с кодами БД и ОАиП. Использовать WHERE.
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, 
		CASE 
			WHEN GROUPS.YEAR_FIRST = 2010 THEN '4'
			WHEN GROUPS.YEAR_FIRST = 2011 THEN '3'
			WHEN GROUPS.YEAR_FIRST = 2012 THEN '2'
			WHEN GROUPS.YEAR_FIRST = 2013 THEN '1'
		END Курс,
		ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT)),2) [Средняя оценка]
FROM STUDENT    INNER JOIN GROUPS ON STUDENT.IDGROUP = GROUPS.IDGROUP
				INNER JOIN FACULTY ON FACULTY.FACULTY = GROUPS.FACULTY
				INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT WHERE PROGRESS.SUBJECT='БД' OR PROGRESS.SUBJECT='ОАиП'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION,  GROUPS.YEAR_FIRST
ORDER BY [Средняя оценка] DESC

--Задание 5
--выводятся специальность, дисциплины и средние оценки при сдаче экзаменов на факультете ТОВ
SELECT GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT)), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ТОВ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT

SELECT isnull(FACULTY.FACULTY, 'Все') Факультет, isnull(GROUPS.PROFESSION, 'Все') Специальность, isnull(PROGRESS.SUBJECT, 'Все') Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ТОВ'
GROUP BY ROLLUP(FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT)

--Задание 6
--Выполнить исходный SELECT-запрос п.5 с использованием CUBE-группировки
SELECT isnull(FACULTY.FACULTY, 'Все') Факультет, isnull(GROUPS.PROFESSION, 'Все') Специальность, isnull(PROGRESS.SUBJECT,'Все') Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ТОВ'
GROUP BY CUBE(FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT)

--Задание 7
--определяются результаты сдачи экзаменов (специальности, дисциплины, средние оценки студентов на факультете ТОВ)
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT)), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ТОВ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT

--определяются результаты сдачи экзаменов на факультете ХТиТ
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ХТиТ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT

--Объединить результаты двух запросов с использованием оператора UNION
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ТОВ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT
UNION
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ХТиТ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT

--Объединить результаты двух запросов с использованием оператора UNION ALL
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ТОВ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT
UNION ALL
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ХТиТ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT

--Задание 8
--Получить пересечение двух множеств строк
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ТОВ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT
INTERSECT
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ХТиТ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT

--Задание 9
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ТОВ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT
EXCEPT
SELECT FACULTY.FACULTY Факультет, GROUPS.PROFESSION Специальность, PROGRESS.SUBJECT Дисциплина, ROUND(AVG(CAST(PROGRESS.NOTE AS FLOAT(4))), 2) [Средняя оценка]
FROM FACULTY INNER JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY,
	 STUDENT INNER JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = 'ХТиТ'
GROUP BY FACULTY.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT

--Задание 10
--На основе таблицы PROGRESS определить для каждой дисциплины количество студентов, получивших оценки 8 и 9.
SELECT SUBJECT, NOTE FROM PROGRESS

SELECT SUBJECT Дисциплина, NOTE Оценка, COUNT(*) Количество
FROM PROGRESS GROUP BY SUBJECT, NOTE HAVING NOTE IN (8,9)
ORDER BY NOTE ASC

--Задание 11 Z_MyBase
USE Z_MyBase;

SELECT 
	MAX(Оценка) [Максимальная],
	MIN(Оценка) [Минимальная],
	AVG(Оценка) [Средняя],
	COUNT(*) [Общее количество]
FROM ОЦЕНКИ

SELECT ОЦЕНКИ.Экзаменационный_предмет [Предмет],
	MAX(Оценка) [Максимальная],
	MIN(Оценка) [Минимальная],
	AVG(Оценка) [Средняя],
	COUNT(*) [Общее количество]
FROM ОЦЕНКИ 
	GROUP BY ОЦЕНКИ.Экзаменационный_предмет
	ORDER BY ОЦЕНКИ.Экзаменационный_предмет ASC


SELECT isnull(СТУДЕНТЫ.Фамилия, 'Итого') Фамилия, isnull(ОЦЕНКИ.Экзаменационный_предмет, 'Итого') Дисциплина, ROUND(AVG(CAST(ОЦЕНКИ.Оценка AS FLOAT(4))), 2) [Средняя оценка]
FROM ОЦЕНКИ INNER JOIN СТУДЕНТЫ ON ОЦЕНКИ.Студент_номер = СТУДЕНТЫ.Номер_студента
GROUP BY ROLLUP(СТУДЕНТЫ.Фамилия, ОЦЕНКИ.Экзаменационный_предмет)

--Задание 12
--Посчитать количество студентов в каждой группе, на каждом факультете и всего в университете
USE Z_UNIVER;

SELECT isnull(FACULTY.FACULTY, 'Итого') Факультет,  isnull(GROUPS.IDGROUP, '9999') [Группа], COUNT(*) [Количество]
FROM STUDENT INNER JOIN GROUPS  ON GROUPS.IDGROUP = STUDENT.IDGROUP INNER JOIN FACULTY ON FACULTY.FACULTY = GROUPS.FACULTY
GROUP BY ROLLUP(FACULTY.FACULTY, GROUPS.IDGROUP) 

--Посчитать количество аудиторий по типам и суммарной вместимости в корпусах и всего
SELECT isnull(AUDITORIUM.AUDITORIUM_TYPE, 'Итого') Аудитория, COUNT(*) [Количество по типам], SUM(AUDITORIUM_CAPACITY) [Суммарная вместимость],
isnull(
		CASE WHEN AUDITORIUM.AUDITORIUM LIKE ('%-1') THEN '1'
			WHEN AUDITORIUM.AUDITORIUM LIKE ('%-2') THEN '2'
			WHEN AUDITORIUM.AUDITORIUM LIKE ('%-3%') THEN '3'
			WHEN AUDITORIUM.AUDITORIUM LIKE ('%-4') THEN '4     '
		END, 'Итого') Корпус
FROM AUDITORIUM INNER JOIN AUDITORIUM_TYPE ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE
GROUP BY ROLLUP(AUDITORIUM.AUDITORIUM_TYPE, 
		CASE WHEN AUDITORIUM.AUDITORIUM LIKE ('%-1') THEN '1'
			WHEN AUDITORIUM.AUDITORIUM LIKE ('%-2') THEN '2'
			WHEN AUDITORIUM.AUDITORIUM LIKE ('%-3%') THEN '3'
			WHEN AUDITORIUM.AUDITORIUM LIKE ('%-4') THEN '4     '
		END) 
